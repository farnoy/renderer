#version 450

#extension GL_KHR_shader_subgroup_basic: require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_EXT_scalar_block_layout: require

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 0, scalar) buffer IndirectCommands {
    VkDrawIndexedIndirectCommand indirect_commands[2400];
} indirect_commands;

layout(set = 1, binding = 0, scalar) buffer IndirectCommandsCount {
    uint count;
} indirect_commands_count;

layout (constant_id = 2) const uint draw_calls_to_compact = 1;

#ifdef RGA
// RGA generates a scalar wavefront without it
layout (local_size_y = 999) in;
#endif

layout (local_size_y_id = 1) in;

shared uint workgroupCounter;

void main() {
    if (gl_LocalInvocationID.y == 0)
        workgroupCounter = 0;

    barrier();

    VkDrawIndexedIndirectCommand copied = indirect_commands.indirect_commands[gl_LocalInvocationID.y];
    bool use = copied.indexCount > 0;
    uvec4 ballot = subgroupBallot(use);
    uint count = subgroupBallotBitCount(ballot);
    uint subgroupOffset = subgroupBallotExclusiveBitCount(ballot);

    uint localOffset = 0;
    if (subgroupElect())
        localOffset = atomicAdd(workgroupCounter, count);
    localOffset = subgroupBroadcastFirst(localOffset);

    barrier();

    // workgroupCounter switches from a counter to the shared offset base for the workgroup
    if (gl_LocalInvocationID.y == 0)
        workgroupCounter = atomicAdd(indirect_commands_count.count, workgroupCounter);
        
    barrier();

    uint offset = workgroupCounter + localOffset + subgroupOffset;

    if (use)
        indirect_commands.indirect_commands[offset] = copied;
}
