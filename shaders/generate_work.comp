#version 450

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 0) uniform UBO {
    mat4 mvp[1024];
} ubo;

layout(set = 1, binding = 0) buffer IndirectCommands {
    VkDrawIndexedIndirectCommand commands[64];
} indirect_commands;

layout(set = 1, binding = 1) buffer readonly IndexBuffer {
    uint data[23358*3];
} index_buffer;

layout(set = 1, binding = 2) buffer readonly VertexBuffer {
    float data[23358*3*3];
} vertex_buffer;

layout(set = 1, binding = 3) buffer OutIndexBuffer {
    uint data[23358*3];
} out_index_buffer;

void main() {
    VkDrawIndexedIndirectCommand command = { 70074, 1, 0, 0, 0};
    indirect_commands.commands[gl_GlobalInvocationID.x] = command;

    uint invocation = gl_GlobalInvocationID.x * 3;
    vec4 input0 = vec4(
        vertex_buffer.data[index_buffer.data[invocation]],
        vertex_buffer.data[index_buffer.data[invocation] + 1],
        vertex_buffer.data[index_buffer.data[invocation] + 2],
        1.0
    );
    vec4 vertex0 = ubo.mvp[0] * input0;
    vec4 input1 = vec4(
        vertex_buffer.data[index_buffer.data[invocation + 1]],
        vertex_buffer.data[index_buffer.data[invocation + 1] + 1],
        vertex_buffer.data[index_buffer.data[invocation + 1] + 2],
        1.0
    );
    vec4 vertex1 = ubo.mvp[0] * input1;
    vec4 input2 = vec4(
        vertex_buffer.data[index_buffer.data[invocation + 2]],
        vertex_buffer.data[index_buffer.data[invocation + 2] + 1],
        vertex_buffer.data[index_buffer.data[invocation + 2] + 2],
        1.0
    );
    vec4 vertex2 = ubo.mvp[0] * input2;

    float det = determinant(mat3(vertex0.xyw, vertex1.xyw, vertex2.xyw));

    float edges = (vertex1.x-vertex0.x)*(vertex1.y+vertex0.y)
                + (vertex2.x-vertex1.x)*(vertex2.y+vertex1.y)
                + (vertex0.x-vertex2.x)*(vertex0.y+vertex2.y);

    if (edges > 0) {
        out_index_buffer.data[invocation] = index_buffer.data[invocation];
        out_index_buffer.data[invocation + 1] = index_buffer.data[invocation + 1];
        out_index_buffer.data[invocation + 2] = index_buffer.data[invocation + 2];
    } else {
        out_index_buffer.data[invocation] = 0;
        out_index_buffer.data[invocation + 1] = 0;
        out_index_buffer.data[invocation + 2] = 0;
    }
}